<project name="Shibboleth Identity Provider" basedir="../../.." default="install">

    <property name="installer.dir" value="${basedir}/src/installer" />
    <property name="resources.dir" value="${installer.dir}/resources" />
    <property name="tools.dir" value="${basedir}/src/tools" />
    <property name="webapp.dir" value="${basedir}/src/main/webapp" />
    <property name="war.name" value="idp" />

    <!-- Installation specific property file -->
    <property file="${resources.dir}/install.properties" />

    <!-- Load ant-contrib tasks -->
    <taskdef resource="net/sf/antcontrib/antlib.xml" />

    <!-- Load Internet2 ant extensions -->
    <taskdef resource="edu/internet2/middleware/ant/antlib.xml" />

    <target name="install" description="Installs the identity provider software.">
        <input message="Is this a new installation? Answering yes will overwrite your current configuration."
               addproperty="new.install"
               validargs="yes,no"
               defaultvalue="no" />

        <if>
            <equals arg1="${new.install}" arg2="yes" />
            <then>
                <input message="Where should the Shibboleth Identity Provider software be installed?"
                       addproperty="idp.home.input"
                       defaultvalue="${idp.home}" />
                <var name="idp.home" value="${idp.home.input}" />

                <pathToAbsolutePath path="${idp.home}" addproperty="idp.home.path" />
                <pathToUrl path="${idp.home}" addproperty="idp.home.url" />

                <input message="What is the fully qualified hostname of the Shibboleth Identity Provider server?"
                       addproperty="idp.hostname.input"
                       defaultvalue="${idp.hostname}" />
                <var name="idp.hostname" value="${idp.hostname.input}" />

                <input message="A keystore is about to be generated for you. Please enter a password that will be used to protect it."
                       addproperty="idp.keystore.pass" />

                <propertyfile file="${resources.dir}/install.properties">
                    <entry key="idp.home" value="${idp.home.input}" />
                    <entry key="idp.hostname" value="${idp.hostname.input}" />
                </propertyfile>

                <mkdir dir="${idp.home.path}" />
                <mkdir dir="${idp.home.path}/bin" />
                <mkdir dir="${idp.home.path}/conf" />
                <mkdir dir="${idp.home.path}/credentials" />
                <mkdir dir="${idp.home.path}/lib" />
                <mkdir dir="${idp.home.path}/lib/endorsed" />
                <mkdir dir="${idp.home.path}/logs" />
                <mkdir dir="${idp.home.path}/metadata" />
                <mkdir dir="${idp.home.path}/war" />

                <var name="idp.entity.id" value="https://${idp.hostname}/idp/shibboleth" />

                <regexSplit input="${idp.hostname}" regex="^.*\.(.*\..*$)" addproperty="idp.scope" />

                <echo message="Generating signing and encryption key, certificate, and keystore. " />
                <selfSignedCert hostname="${idp.hostname}"
                                privateKeyFile="${idp.home.path}/credentials/idp.key"
                                certificateFile="${idp.home.path}/credentials/idp.crt"
                                keystoreFile="${idp.home.path}/credentials/idp.jks"
                                keystorePassword="${idp.keystore.pass}"
                                uriSubjectAltNames="${idp.entity.id}" />

                <copy todir="${idp.home.path}/bin" preservelastmodified="true">
                    <fileset dir="${tools.dir}/bash" />
                    <fileset dir="${tools.dir}/bat" />
                    <filterset begintoken="$" endtoken="$">
                        <filter token="IDP_HOME" value="${idp.home.path}" />
                        <filter token="IDP_VERSION" value="${version}" />
                    </filterset>
                </copy>
                <chmod file="${idp.home.path}/bin/*.sh" perm="+x" />

                <copy todir="${idp.home.path}/conf" preservelastmodified="true" overwrite="true">
                    <fileset dir="${resources.dir}/conf-tmpl" />
                    <filterset begintoken="$" endtoken="$">
                        <filter token="IDP_HOME" value="${idp.home.path}" />
                        <filter token="IDP_VERSION" value="${version}" />
                        <filter token="IDP_ENTITY_ID" value="${idp.entity.id}" />
                        <filter token="IDP_SCOPE" value="${idp.scope}" />
                        <filter token="IDP_CERTIFICATE" value="${idp.cert}" />
                        <filter token="IDP_HOSTNAME" value="${idp.hostname}" />
                    </filterset>
                </copy>

                <stringFromFile input="${idp.home.path}/credentials/idp.crt" addProperty="idp.cert" />
                <regexSplit input="${idp.cert}"
                            regex="\A.*-----\s((?:.*\s)*)-----END.*\Z"
                            addproperty="idp.metadata.cert" />
                <copy todir="${idp.home.path}/metadata" preservelastmodified="true" overwrite="true">
                    <fileset dir="${resources.dir}/metadata-tmpl" />
                    <filterset begintoken="$" endtoken="$">
                        <filter token="IDP_ENTITY_ID" value="${idp.entity.id}" />
                        <filter token="IDP_SCOPE" value="${idp.scope}" />
                        <filter token="IDP_CERTIFICATE" value="${idp.metadata.cert}" />
                        <filter token="IDP_HOSTNAME" value="${idp.hostname}" />
                    </filterset>
                </copy>
            </then>
        </if>

        <copy todir="${idp.home.path}/lib" preservelastmodified="true">
            <fileset dir="${basedir}/lib" />
        </copy>

        <copy todir="${idp.home.path}/lib/endorsed" preservelastmodified="true" failonerror="false">
            <fileset dir="endorsed" />
        </copy>

        <!-- create web.xml -->
        <copy file="${webapp.dir}/WEB-INF/web.xml"
              todir="${installer.dir}"
              preservelastmodified="true"
              overwrite="true">
            <filterset begintoken="$" endtoken="$">
                <filter token="IDP_HOME" value="${idp.home.url}" />
            </filterset>
        </copy>

        <!-- build the war file -->
        <war warfile="${idp.home.path}/war/${war.name}.war" webxml="${installer.dir}/web.xml">
            <lib dir="${basedir}/lib" />
            <webinf dir="${webapp.dir}/WEB-INF" excludes="web.xml" />
            <fileset dir="${webapp.dir}" excludes="WEB-INF/**" />
        </war>

        <!-- Remove generated web.xml -->
        <delete file="${installer.dir}/web.xml" />
    </target>

</project>