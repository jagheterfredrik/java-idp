<!-- 
  This file is imported in to the main Shibboleth build.xml file and 
  contains all targets used for building IdP and SP extensions.
  
  Chad La Joie
  July 6, 2005
-->
<project name="Shibboleth-Extensions" default="build-exts" basedir=".">

    <!-- Builds the extensions; loops through all the extension directories and builds them -->
    <target name="build-exts" description="Compiles IdP and/or SP extensions">
        <for keepgoing="true" param="module-path">
            <dirset dir="${exts.dir}">
                <include name="*" />
                <exclude name="lib" />
                <exclude name="web" />
            </dirset>
            <sequential>
                <antcall target="ext-build">
                    <param name="ext.root" value="@{module-path}" />
                </antcall>
            </sequential>
        </for>
    </target>

    <!-- Builds a single extension, called multiple times by build-exts -->
    <target name="ext-build" depends="ext-build-init" description="Builds the extension">
        <echo message="--- Starting to build module ${ext.name} in ${ext.root}" />

        <!-- Compile the source -->
        <antcall target="ext-compile" />

        <!-- Copy over non-source files -->
        <antcall target="ext-copy-etc" />

        <!-- Generate the java docs if we're supposed to -->
        <antcall target="ext-gen-docs" />

        <!-- Run unit tests if we're supposed to -->
        <antcall target="ext-test" />

        <!-- Package everything up -->
        <antcall target="ext-package" />

        <!-- Put the libraries where the IdP and SP packaging can pick them up -->
        <antcall target="ext-copy-libs"/>

        <!-- Put the webpages where the IdP and SP packaging can pick them up -->
        <antcall target="ext-copy-webpages"/>
        
        <echo message="--- Extension ${ext.name} built" />
    </target>

    <!-- Initialize everything we need. -->
    <!-- The properties loaded here are scoped to this particular extension build -->
    <target name="ext-build-init" description="Sets up everything to prepare for the build">
        <echo message="Loading build property files" />
        <!-- 
          Load extension specific properties if available. We can not set the extension's build.properties 
          file name in the extension-build.properties file because if we read that file first the extension 
          build properties won't be able to override properties in it as properties are immutable once set.
        -->
        <if>
        	<not>
        		<available file="${ext.root}/build.properties"/>
        	</not>
            <then>
                <fail message="No build.properties file found for extension in ${ext.root}; this file is required."/>
            </then>
        </if>
        <property file="${ext.root}/build.properties" />

        <!-- Load default properties -->
        <echo message="Loading build property defaults ${exts.dir}/default-build.properties" />
        <property file="${exts.dir}/extension-build.properties" />

        <!-- Create needed directories -->
        <mkdir dir="${ext.dist}" />
        <mkdir dir="${ext.classes}" />
    </target>

    <!-- Compiles the extension -->
    <target name="ext-compile" description="Compiles an extension">
        <!-- Compile any source that might be out there -->
        <if>
            <available file="${ext.src}" />
            <then>
                <echo message="Compiling extension source" />
                <javac srcdir="${ext.src}" destdir="${ext.classes}" includes="**/*.java" debug="on" source="1.4">
                    <!-- Shibboleth Libraries -->
                    <classpath refid="build.path" />

                    <!-- Shibboleth Classes -->
                    <classpath>
                    	<pathelement location="${build}"/>
                    </classpath>
                    
                    <!-- Extension libraries -->
                    <classpath>
                        <fileset dir="${ext.lib}">
                            <include name="**/*.jar" />
                        </fileset>
                    </classpath>
                </javac>
            </then>
        </if>
    </target>

    <!-- Copies files from etc directory to dist directory to be bundled with extension jar -->
    <target name="ext-copy-etc" depends="ext-build-init" description="Copys non-source files to place where they will be added to jar">
        <!-- Copy any extra stuff that needs to be on the classpath -->
        <if>
            <available file="${ext.etc}" />
            <then>
                <echo message="Detected files in the extensions 'etc' directory, ensuring they are bundled with the extension's jar." />
                <copy todir="${ext.classes}">
                    <fileset dir="${ext.etc}">
                        <include name="**" />
                    </fileset>
                </copy>
            </then>
        </if>
    </target>
    
    <!-- Move third party libraries to be picked up by the war -->
    <target name="ext-copy-libs" depends="ext-compile" description="Moves third party libraries to be picked up by the war">
        <if>
            <available file="${ext.lib}" />
            <then>
                <copy todir="${exts.dir}/lib">
                    <fileset dir="${ext.lib}" includes="*.jar" />
                    <fileset dir="${ext.dist}" includes="*.jar" />
                </copy>
            </then>
        </if>
    </target>

    <!-- Move web resources to be picked up by the war -->
    <target name="ext-copy-webpages" depends="ext-compile" description="Moves web resources to be picked up by the war">
        <if>
            <available file="${ext.webpages}" />
            <then>
                <copy todir="${exts.dir}/web">
                    <fileset dir="${ext.webpages}"/>    
                </copy>
            </then>
        </if>
    </target>

    
    <!-- Run any unit tests for the extension -->
    <target name="ext-test" depends="ext-compile" description="Runs extension unit test">
        <if>
            <equals arg1="${test.ext}" arg2="true" />
            <then>
                <if>
                    <available file="${ext.test.src}" />
                    <then>
                        <echo message="Running tests cases for extension ${ext.name}" />
                        <junit printsummary="no" fork="yes" haltonerror="true" haltonfailure="true" jvm="${ext.root}">
                            <jvmarg value="-Djava.endorsed.dirs=${endorsed}" />
                            <formatter type="plain" />
                            <batchtest>
                                <fileset dir="${ext.test.src}" />
                            </batchtest>
                        </junit>
                    </then>
                </if>
            </then>
        </if>

    </target>

    <!-- Generates the Javadocs for the extension -->
    <target name="ext-gen-docs" description="Generates Javadocs for extension">
        <if>
            <equals arg1="${gen.ext.docs}" arg2="true" />
            <then>
                <if>
                    <available file="${ext.src}" />
                    <then>
                        <echo message="Generating javadocs for extension ${ext.name}" />
                        <javadoc sourcepath="${ext.src}" 
                                 destdir="${ext.docs}" 
                                 packagenames="*"
                                 author="true"
                                 version="true"
                                 windowtitle="${ext.name} Shibboleth Extension Java API"
                                 doctitle="${ext.name} Shibboleth Extension Java API"
                                 failonerror="false">
                            <classpath refid="build.path" />
                    	</javadoc>
                    </then>
                </if>
            </then>
        </if>
    </target>

    <!-- Jars up the extension -->
    <target name="ext-package" depends="ext-compile" description="Packages up the extension">
        <jar jarfile="${ext.dist}/${ext.name}.jar" basedir="${ext.classes}" excludes="${ext.name}.jar" />
    </target>

    <!-- Cleans up build generated resources -->
    <target name="ext-clean" description="Cleans up any build created resources">
        <!-- Clean up all the modules -->
        <for keepgoing="true" param="module-path">
            <dirset dir="${exts.dir}">
                <include name="*" />
                <exclude name="lib" />
                <exclude name="web" />
            </dirset>
            <sequential>
                <delete dir="${ext.dist}" />
            </sequential>
        </for>
    </target>

</project>